from aiogram import Router, F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.filters import Command
from typing import Dict, List, Tuple
from models import Player
from database import get_player_rating, get_player_stats, get_leaderboard, fetch_seen_question_ids

router = Router()

queues: Dict[str, List[Player]] = {
    "easy": [],
    "medium": [],
    "hard": []
}

LEVEL_NAMES = {
    "easy": "–ª—ë–≥–∫–∏–π",
    "medium": "—Å—Ä–µ–¥–Ω–∏–π",
    "hard": "—Å–ª–æ–∂–Ω—ã–π"
}

TOP_PLAYERS_LIMIT = 10

def create_main_keyboard(include_leave_queue: bool = False) -> ReplyKeyboardMarkup:
    keyboard_buttons = [
        [KeyboardButton(text="üë®‚Äç‚úàÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—é")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")],
        [KeyboardButton(text="‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å")]
    ]
    if include_leave_queue:
        keyboard_buttons.insert(1, [KeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")])
        keyboard_buttons.pop(0)
    return ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)

def create_level_selection_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–õ—ë–≥–∫–∏–π", callback_data="level_easy"),
            InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="level_medium"),
            InlineKeyboardButton(text="–°–ª–æ–∂–Ω—ã–π", callback_data="level_hard")
        ]]
    )

def create_game_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")],
            [KeyboardButton(text="‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å")]
        ],
        resize_keyboard=True
    )

def create_no_questions_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë®‚Äç‚úàÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—é")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")],
            [KeyboardButton(text="‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å")]
        ],
        resize_keyboard=True
    )

def create_rematch_keyboard(key: str, accept: bool = False) -> InlineKeyboardMarkup:
    if accept:
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîÑ –ü—Ä–∏–Ω—è—Ç—å —Ä–µ–≤–∞–Ω—à", callback_data=f"rematch:{key}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_rematch:{key}")
        ]])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîÑ –í–∑—è—Ç—å —Ä–µ–≤–∞–Ω—à", callback_data=f"rematch:{key}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_rematch:{key}")
        ]])

def is_player_in_queue(user_id: int) -> bool:
    return any(any(p.user_id == user_id for p in queue) for queue in queues.values())

def is_player_in_match(user_id: int) -> bool:
    from .match import active_matches, player_matches
    if user_id not in player_matches:
        return False
    match_id = player_matches.get(user_id)
    match_exists = match_id in active_matches
    if not match_exists:
        del player_matches[user_id]
        return False
    return True

def get_player_status(user_id: int) -> Tuple[bool, bool]:
    return is_player_in_queue(user_id), is_player_in_match(user_id)

def remove_player_from_queues(user_id: int) -> bool:
    removed = False
    for level in queues:
        before_len = len(queues[level])
        queues[level] = [p for p in queues[level] if p.user_id != user_id]
        if len(queues[level]) < before_len:
            removed = True
    return removed

async def check_available_questions(user_id: int, level: str) -> Tuple[bool, str]:
    from models.match import MatchFactory
    seen_question_ids = await fetch_seen_question_ids(user_id, level)
    all_questions = MatchFactory.get_questions_by_level(level)
    available_questions = [q for q in all_questions if q.get('id') not in seen_question_ids]
    if not available_questions:
        return False, f"–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã —É—Ä–æ–≤–Ω—è '{LEVEL_NAMES[level]}'. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."
    return True, ""

async def try_start_match_with_opponent(current_player: Player, level: str) -> bool:
    from .match import create_match
    opponent = None
    for player in queues[level]:
        if player.user_id != current_player.user_id:
            opponent = player
            break
    if opponent:
        queues[level] = [p for p in queues[level] if p.user_id not in [current_player.user_id, opponent.user_id]]
        await create_match(current_player, opponent, level)
        print(f"–ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ {current_player.user_id} –∏ {opponent.user_id} –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}")
        return True
    return False

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô ===
@router.message(Command("start"))
async def start_command(message: Message):
    keyboard = create_main_keyboard()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BattleStudy - –±–æ—Ç –¥–ª—è –ø–æ–µ–¥–∏–Ω–∫–æ–≤ –ø–æ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.message(F.text == "üë®‚Äç‚úàÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—é")
async def join_battle(message: Message):
    user_id = message.from_user.id
    in_queue, in_match = get_player_status(user_id)
    if in_queue:
        await message.answer("–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!")
        return
    if in_match:
        await message.answer("–¢—ã —É–∂–µ –≤ –ø–æ–µ–¥–∏–Ω–∫–µ!")
        return
    keyboard = create_level_selection_keyboard()
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("level_"))
async def select_level(callback: CallbackQuery):
    level = callback.data.split("_")[1]
    user_id = callback.from_user.id
    in_queue, in_match = get_player_status(user_id)
    if in_queue:
        await callback.answer("–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!")
        return
    if in_match:
        await callback.answer("–¢—ã —É–∂–µ –≤ –ø–æ–µ–¥–∏–Ω–∫–µ!")
        return
    questions_available, error_message = await check_available_questions(user_id, level)
    if not questions_available:
        keyboard = create_main_keyboard()
        await callback.message.answer(f"‚ùó {error_message}", reply_markup=keyboard)
        await callback.answer()
        return
    player = Player(
        user_id=user_id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        rating=await get_player_rating(user_id),
        preferred_level=level
    )
    queues[level].append(player)
    print(f"–ò–≥—Ä–æ–∫ {player.user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å {level}. –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å {level}: {[p.user_id for p in queues[level]]}")
    match_started = await try_start_match_with_opponent(player, level)
    if not match_started:
        keyboard = create_main_keyboard(include_leave_queue=True)
        await callback.message.answer(
            f"–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {LEVEL_NAMES[level]}. –ñ–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...",
            reply_markup=keyboard
        )
    await callback.answer()

@router.message(F.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
async def leave_queue(message: Message):
    user_id = message.from_user.id
    removed = remove_player_from_queues(user_id)
    if removed:
        keyboard = create_main_keyboard()
        await message.answer("–¢—ã –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏.", reply_markup=keyboard)
        print(f"–ò–≥—Ä–æ–∫ {user_id} –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
    else:
        await message.answer("–¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏.")

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user_id = message.from_user.id
    stats = await get_player_stats(user_id)
    await message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: {message.from_user.first_name}\n\n"
        f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –±–æ–µ–≤: {stats['total_games']}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['rating']}\n\n"
        f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥:\n\n"
        f"    üü¢ –õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {stats['wins_easy']}\n"
        f"    üü° –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {stats['wins_medium']}\n"
        f"    üî¥ –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {stats['wins_hard']}\n"
    )

@router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
async def show_leaderboard(message: Message):
    leaderboard = await get_leaderboard(TOP_PLAYERS_LIMIT)
    if not leaderboard:
        await message.answer("–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        return
    text = f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (—Ç–æ–ø-{TOP_PLAYERS_LIMIT}):\n\n"
    for i, (user_id, rating) in enumerate(leaderboard, 1):
        try:
            user = await router.bot.get_chat(user_id)
            name = user.first_name
        except Exception:
            name = f"–ò–≥—Ä–æ–∫ {user_id}"
        text += f"{i}. {name} ‚Äî {rating} –æ—á–∫–æ–≤\n"
    await message.answer(text)

@router.message(F.text == "‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å")
async def show_help(message: Message):
    help_text = (
        "üìö <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ BattleStudy</b>\n\n"
        "BattleStudy - —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–µ–¥–∏–Ω–∫–æ–≤ –ø–æ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π. "
        "–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n\n"
        "1Ô∏è‚É£ <b>–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—é', –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, "
        "–∏ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –≤–∞–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.\n\n"
        "2Ô∏è‚É£ <b>–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç</b>\n"
        "–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —É –≤–∞—Å –±—É–¥–µ—Ç —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç:\n\n"
        "   üü¢ –õ–µ–≥–∫–∏–π: 1 –º–∏–Ω—É—Ç–∞\n"
        "   üü° –°—Ä–µ–¥–Ω–∏–π: 3 –º–∏–Ω—É—Ç—ã\n"
        "   üî¥ –°–ª–æ–∂–Ω—ã–π: 5 –º–∏–Ω—É—Ç\n\n"
        "3Ô∏è‚É£ <b>–ü–æ–±–µ–¥–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥</b>\n"
        "–ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –¥–∞—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. "
        "–ó–∞ –ø–æ–±–µ–¥—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞, –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ç–µ—Ä—è–µ—Ç–µ.\n\n"
        "   üü¢ –õ–µ–≥–∫–∏–π: +10/-5 –æ—á–∫–æ–≤\n"
        "   üü° –°—Ä–µ–¥–Ω–∏–π: +25/-15 –æ—á–∫–æ–≤\n"
        "   üî¥ –°–ª–æ–∂–Ω—ã–π: +50/-35 –æ—á–∫–æ–≤\n\n"
        "4Ô∏è‚É£ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        "–í –ø—Ä–æ—Ñ–∏–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –ø–æ –∫–∞–∂–¥–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –±–æ–µ–≤ "
        "–Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        "5Ô∏è‚É£ <b>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</b>\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É.\n\n"
        "–£–¥–∞—á–∏ –≤ –ø–æ–µ–¥–∏–Ω–∫–∞—Ö! üéÆ"
    )
    await message.answer(help_text)